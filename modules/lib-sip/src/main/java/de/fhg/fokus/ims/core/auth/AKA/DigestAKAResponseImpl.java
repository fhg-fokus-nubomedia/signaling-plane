/*
 * Copyright (C) 2007 FhG FOKUS, Institute for Open Communication Systems
 *
 * This file is part of OpenIC - an IMS user endpoint implementation
 * 
 * OpenIC is proprietary software that is licensed 
 * under the FhG FOKUS "SOURCE CODE LICENSE for FOKUS IMS COMPONENTS".
 * You should have received a copy of the license along with this 
 * program; if not, write to Fraunhofer Institute FOKUS, Kaiserin-
 * Augusta Allee 31, 10589 Berlin, GERMANY 
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * It has to be noted that this software is not intended to become 
 * or act as a product in a commercial context! It is a PROTOTYPE
 * IMPLEMENTATION for IMS technology testing and IMS application 
 * development for research purposes, typically performed in IMS 
 * test-beds. See the attached license for more details. 
 *
 * For a license to use this software under conditions
 * other than those described here, please contact Fraunhofer FOKUS 
 * via e-mail at the following address:
 * 
 *    info@open-ims.org
 *
 */
package de.fhg.fokus.ims.core.auth.AKA;


/**
 * 
 * This class represents a response to a AKA challenge, as generated by DigestAKA.
 * 
 * @author FhG FOKUS <a href="mailto:openic@open-ims.org">openic@open-ims.org</a>
 *
 */
public class DigestAKAResponseImpl implements DigestAKAResponse
{
	private String response,auts;
	private byte[] res,ck,ik;
	private boolean isSynchronization;
	private boolean unauthorizedChallenge;
	private byte[] newSQN;
	private boolean isSqnMS;
	
	/**
	 * @param synchronization
	 * @param value
	 */
	public DigestAKAResponseImpl(String response,String auts,boolean isSynchronization,boolean unauthorizedChallenge,byte[] newSQN,
			boolean isSqnMS, byte[] res,byte[] ck, byte[] ik) {
		this.isSynchronization = isSynchronization;
		this.response = response;
		this.auts = auts;
		this.unauthorizedChallenge = unauthorizedChallenge;
		this.newSQN = newSQN;
		this.isSqnMS = isSqnMS;
		this.res = res;
		this.ck = ck;
		this.ik = ik;
	}

	public String getResponse()
	{
		return response;
	}

	public String getAuts()
	{
		return auts;
	}

	public byte[] getRes()
	{
		return res;
	}

	public byte[] getCk()
	{
		return ck;
	}

	public byte[] getIk()
	{
		return ik;
	}

	public boolean isSynchronization()
	{
		return isSynchronization;
	}

	public boolean isUnauthorizedChallenge()
	{
		return unauthorizedChallenge;
	}

	public byte[] getNewSQN()
	{
		return newSQN;
	}

	public boolean isSqnMS()
	{
		return isSqnMS;
	}

	
	public String toString() {
		StringBuffer stb = new StringBuffer();
		stb.append("RES = ");
		stb.append(response);
		stb.append("\nAUTS = ");
		stb.append(auts);
		stb.append("\nisSynchronization = ");
		stb.append(isSynchronization);
		stb.append("\nunauthorizedChallenge = ");
		stb.append(unauthorizedChallenge);
		stb.append("\nnewSQN = ");
		stb.append(new String(DigestAKA.bin2hexa(newSQN)));
		stb.append("\nisSqnMS = ");
		stb.append(this.isSqnMS);
		stb.append("\nCK = ");
		stb.append(new String(DigestAKA.bin2hexa(ck)));
		stb.append("\nIK = ");
		stb.append(new String(DigestAKA.bin2hexa(ik)));
		return stb.toString();
	}

}
